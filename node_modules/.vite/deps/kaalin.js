var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/kaalin/dist/number/number.js
var require_number = __commonJS({
  "node_modules/kaalin/dist/number/number.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NumberToWord = void 0;
    var NumberToWord = class {
      constructor() {
        this.ones = [
          "",
          "bir",
          "eki",
          "úsh",
          "tórt",
          "bes",
          "altı",
          "jeti",
          "segiz",
          "toǵız",
          "on",
          "on bir",
          "on eki",
          "on úsh",
          "on tórt",
          "on bes",
          "on altı",
          "on jeti",
          "on segiz",
          "on toǵız"
        ];
        this.tens = ["", "", "jigirma", "otız", "qırıq", "eliw", "alpıs", "jetpis", "seksen", "toqsan"];
        this.scales = [
          { value: 1e30, word: "nonillion" },
          { value: 1e27, word: "oktillion" },
          { value: 1e24, word: "septillion" },
          { value: 1e21, word: "sekstilion" },
          { value: 1e18, word: "kvintillion" },
          { value: 1e15, word: "kvadrillion" },
          { value: 1e12, word: "trillion" },
          { value: 1e9, word: "milliard" },
          { value: 1e6, word: "million" },
          { value: 1e3, word: "mıń" }
        ];
      }
      toWord(number) {
        if (number < 20)
          return this.ones[number];
        if (number < 100)
          return this.formatTens(number);
        if (number < 1e3)
          return this.formatHundreds(number);
        if (number >= 1e33) {
          throw new Error("Number is out of range");
        }
        for (const scale of this.scales) {
          if (number >= scale.value)
            return this.formatLargeNumber(number, scale.value, scale.word);
        }
        throw new Error("Number is out of range");
      }
      formatTens(number) {
        const mainDigit = Math.floor(number / 10);
        const remainder = number % 10;
        return remainder === 0 ? this.tens[mainDigit] : `${this.tens[mainDigit]} ${this.ones[remainder]}`;
      }
      formatHundreds(number) {
        const hundredDigit = Math.floor(number / 100);
        const remainder = number % 100;
        return remainder === 0 ? hundredDigit === 1 ? "júz" : `${this.ones[hundredDigit]} júz` : `${this.ones[hundredDigit]} júz ${this.toWord(remainder)}`;
      }
      formatLargeNumber(number, divisor, word) {
        const mainDigit = Math.floor(number / divisor);
        const remainder = number % divisor;
        return remainder === 0 ? `${this.toWord(mainDigit)} ${word}` : `${this.toWord(mainDigit)} ${word} ${this.toWord(remainder)}`;
      }
    };
    exports.NumberToWord = NumberToWord;
  }
});

// node_modules/kaalin/dist/number/index.js
var require_number2 = __commonJS({
  "node_modules/kaalin/dist/number/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_number(), exports);
  }
});

// node_modules/kaalin/dist/words/cyrillic.js
var require_cyrillic = __commonJS({
  "node_modules/kaalin/dist/words/cyrillic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Cyrillic = void 0;
    var Cyrillic = class {
      constructor(text) {
        this.uppercases = [
          "А",
          "Ә",
          "Б",
          "Д",
          "Е",
          "Ф",
          "Г",
          "Ғ",
          "Ҳ",
          "Х",
          "Ы",
          "И",
          "Ж",
          "К",
          "Қ",
          "Л",
          "М",
          "Н",
          "Ң",
          "О",
          "Ө",
          "П",
          "Р",
          "С",
          "Т",
          "У",
          "Ү",
          "В",
          "Ў",
          "Й",
          "З",
          "Ш",
          "Ц",
          "Ч",
          " "
        ];
        this.lowercases = [
          "а",
          "ә",
          "б",
          "д",
          "е",
          "ф",
          "г",
          "ғ",
          "ҳ",
          "х",
          "ы",
          "и",
          "ж",
          "к",
          "қ",
          "л",
          "м",
          "н",
          "ң",
          "о",
          "ө",
          "п",
          "р",
          "с",
          "т",
          "у",
          "ү",
          "в",
          "ў",
          "й",
          "з",
          "ш",
          "ц",
          "ч",
          " "
        ];
        this.text = text;
      }
      getUppercases() {
        return this.uppercases;
      }
      getLowercases() {
        return this.lowercases;
      }
      isUpper() {
        return [...this.text].every((char) => this.uppercases.includes(char));
      }
      isLower() {
        return [...this.text].every((char) => this.lowercases.includes(char));
      }
      isDigit() {
        return /^\d+$/.test(this.text);
      }
      isAlpha() {
        return /^[\p{L}\d]+$/u.test(this.text);
      }
      swapCase() {
        return [...this.text].map((char) => this.uppercases.includes(char) ? char.toLowerCase() : this.lowercases.includes(char) ? char.toUpperCase() : char).join("");
      }
      upper() {
        const upperMapping = new Map(this.lowercases.map((lc, i) => [lc, this.uppercases[i]]));
        return [...this.text].map((char) => upperMapping.get(char) || char).join("");
      }
      lower() {
        const lowerMapping = new Map(this.uppercases.map((uc, i) => [uc, this.lowercases[i]]));
        return [...this.text].map((char) => lowerMapping.get(char) || char).join("");
      }
    };
    exports.Cyrillic = Cyrillic;
  }
});

// node_modules/kaalin/dist/words/latin.js
var require_latin = __commonJS({
  "node_modules/kaalin/dist/words/latin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Latin = void 0;
    var Latin = class _Latin {
      constructor(text) {
        this.text = text;
      }
      static getUppercases() {
        return this.uppercases;
      }
      static getLowercases() {
        return this.lowercases;
      }
      isUpper() {
        return [...this.text].every((char) => _Latin.uppercases.includes(char));
      }
      isLower() {
        return [...this.text].every((char) => _Latin.lowercases.includes(char));
      }
      isDigit() {
        return /^[0-9]+$/.test(this.text);
      }
      isAlpha() {
        return /^[a-zA-Z]+$/.test(this.text);
      }
      swapCase() {
        return [...this.text].map((char) => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).join("");
      }
      upper() {
        const upperMapping = Object.fromEntries(_Latin.lowercases.map((lc, i) => [lc, _Latin.uppercases[i]]));
        return [...this.text].map((char) => upperMapping[char] || char).join("");
      }
      lower() {
        const lowerMapping = Object.fromEntries(_Latin.uppercases.map((uc, i) => [uc, _Latin.lowercases[i]]));
        return [...this.text].map((char) => lowerMapping[char] || char).join("");
      }
    };
    exports.Latin = Latin;
    Latin.uppercases = [
      "A",
      "Á",
      "B",
      "D",
      "E",
      "F",
      "G",
      "Д",
      "H",
      "X",
      "Í",
      "I",
      "J",
      "K",
      "Q",
      "L",
      "M",
      "N",
      "Ń",
      "O",
      "Ó",
      "P",
      "R",
      "S",
      "T",
      "U",
      "Ú",
      "V",
      "W",
      "Y",
      "Z",
      "Ш",
      "C",
      "Ch",
      " "
    ];
    Latin.lowercases = [
      "a",
      "á",
      "b",
      "d",
      "e",
      "f",
      "g",
      "Ǵ",
      "h",
      "x",
      "ı",
      "i",
      "j",
      "k",
      "q",
      "l",
      "m",
      "n",
      "ń",
      "o",
      "ó",
      "p",
      "r",
      "s",
      "t",
      "u",
      "ú",
      "v",
      "w",
      "y",
      "z",
      "sh",
      "c",
      "ch",
      " "
    ];
  }
});

// node_modules/kaalin/dist/words/index.js
var require_words = __commonJS({
  "node_modules/kaalin/dist/words/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_cyrillic(), exports);
    __exportStar(require_latin(), exports);
  }
});

// node_modules/kaalin/dist/constants.js
var require_constants = __commonJS({
  "node_modules/kaalin/dist/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.latinToCyrillic = exports.cyrillicToLatin = void 0;
    var cyrillicToLatinUppercase = {
      "А": "A",
      "Ә": "Á",
      "Б": "B",
      "В": "V",
      "Г": "G",
      "Ғ": "Ǵ",
      "Д": "D",
      "Е": "E",
      "Ё": "Yo",
      "Ж": "J",
      "З": "Z",
      "И": "I",
      "Й": "Y",
      "К": "K",
      "Қ": "Q",
      "Л": "L",
      "М": "M",
      "Н": "N",
      "Ң": "Ń",
      "О": "O",
      "Ө": "Ó",
      "П": "P",
      "Р": "R",
      "С": "S",
      "Т": "T",
      "У": "U",
      "Ү": "Ú",
      "Ў": "W",
      "Ф": "F",
      "Х": "X",
      "Ҳ": "H",
      "Ц": "C",
      "Ч": "Ch",
      "Ш": "Sh",
      "Щ": "Sh",
      "Ъ": "",
      "Ы": "Í",
      "Ь": "",
      "Э": "E",
      "Ю": "Yu",
      "Я": "Ya"
    };
    var cyrillicToLatinLowercase = {
      "а": "a",
      "ә": "á",
      "б": "b",
      "в": "v",
      "г": "g",
      "ғ": "ǵ",
      "д": "d",
      "е": "e",
      "ё": "yo",
      "ж": "j",
      "з": "z",
      "и": "i",
      "й": "y",
      "к": "k",
      "қ": "q",
      "л": "l",
      "м": "m",
      "н": "n",
      "ң": "ń",
      "о": "o",
      "ө": "ó",
      "п": "p",
      "р": "r",
      "с": "s",
      "т": "t",
      "у": "u",
      "ү": "ú",
      "ў": "w",
      "ф": "f",
      "х": "x",
      "ҳ": "h",
      "ц": "c",
      "ч": "ch",
      "ш": "sh",
      "щ": "sh",
      "ъ": "",
      "ы": "ı",
      "ь": "",
      "э": "e",
      "ю": "yu",
      "я": "ya"
    };
    var latinToCyrillicUppercase = {
      "Sh": "Ш",
      "SH": "Ш",
      "Ch": "Ч",
      "CH": "Ч",
      "Ya": "Я",
      "YA": "Я",
      "Yu": "Ю",
      "YU": "Ю",
      "A": "А",
      "Á": "Ә",
      "B": "Б",
      "D": "Д",
      "E": "Е",
      "F": "Ф",
      "G": "Г",
      "Ǵ": "Ғ",
      "H": "Ҳ",
      "X": "Х",
      "Í": "Ы",
      "I": "И",
      "J": "Ж",
      "K": "К",
      "Q": "Қ",
      "L": "Л",
      "M": "М",
      "N": "Н",
      "Ń": "Ң",
      "O": "О",
      "Ó": "Ө",
      "P": "П",
      "R": "Р",
      "S": "С",
      "T": "Т",
      "U": "У",
      "Ú": "Ү",
      "V": "В",
      "W": "Ў",
      "Y": "Й",
      "Z": "З",
      "C": "Ц"
    };
    var latinToCyrillicLowercase = {
      "sh": "ш",
      "ch": "ч",
      "ya": "я",
      "yu": "ю",
      "a": "а",
      "á": "ә",
      "b": "б",
      "d": "д",
      "e": "е",
      "f": "ф",
      "g": "г",
      "ǵ": "ғ",
      "h": "ҳ",
      "x": "х",
      "i": "и",
      "ı": "ы",
      "j": "ж",
      "k": "к",
      "q": "қ",
      "l": "л",
      "m": "м",
      "n": "н",
      "ń": "ң",
      "o": "о",
      "ó": "ө",
      "p": "п",
      "r": "р",
      "s": "с",
      "t": "т",
      "u": "у",
      "ú": "ү",
      "v": "б",
      "w": "ў",
      "y": "й",
      "z": "з",
      "c": "ц"
    };
    var cyrillicToLatin = Object.assign(Object.assign({}, cyrillicToLatinUppercase), cyrillicToLatinLowercase);
    exports.cyrillicToLatin = cyrillicToLatin;
    var latinToCyrillic = Object.assign(Object.assign({}, latinToCyrillicUppercase), latinToCyrillicLowercase);
    exports.latinToCyrillic = latinToCyrillic;
  }
});

// node_modules/kaalin/dist/converter/latin_cyrillic_converter.js
var require_latin_cyrillic_converter = __commonJS({
  "node_modules/kaalin/dist/converter/latin_cyrillic_converter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.latin2cyrillic = latin2cyrillic;
    exports.cyrillic2latin = cyrillic2latin;
    var constants_1 = require_constants();
    function latin2cyrillic(text) {
      var _a;
      let result = [];
      let i = 0;
      while (i < text.length) {
        if (i < text.length - 1 && constants_1.latinToCyrillic[text.substring(i, i + 2)]) {
          result.push(constants_1.latinToCyrillic[text.substring(i, i + 2)]);
          i += 2;
        } else {
          result.push((_a = constants_1.latinToCyrillic[text[i]]) !== null && _a !== void 0 ? _a : text[i]);
          i += 1;
        }
      }
      return result.join("");
    }
    function cyrillic2latin(text) {
      text = handleSpecialCyrillicRulesIfNeeded(text);
      let result = [];
      for (let char of text) {
        result.push(constants_1.cyrillicToLatin[char] || char);
      }
      return result.join("");
    }
    function handleSpecialCyrillicRulesIfNeeded(text) {
      const specialRulePairs = {
        "ьи": "yi",
        "ьо": "yo",
        "ъе": "ye"
      };
      for (const [cyr, lat] of Object.entries(specialRulePairs)) {
        if (text.includes(cyr) && !text.startsWith(cyr)) {
          text = text.replace(new RegExp(cyr, "g"), lat);
        }
      }
      return text;
    }
  }
});

// node_modules/kaalin/dist/converter/index.js
var require_converter = __commonJS({
  "node_modules/kaalin/dist/converter/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cyrillic2latin = exports.latin2cyrillic = void 0;
    var latin_cyrillic_converter_1 = require_latin_cyrillic_converter();
    Object.defineProperty(exports, "latin2cyrillic", { enumerable: true, get: function() {
      return latin_cyrillic_converter_1.latin2cyrillic;
    } });
    Object.defineProperty(exports, "cyrillic2latin", { enumerable: true, get: function() {
      return latin_cyrillic_converter_1.cyrillic2latin;
    } });
  }
});

// node_modules/kaalin/dist/index.js
var require_dist = __commonJS({
  "node_modules/kaalin/dist/index.js"(exports) {
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toWord = toWord;
    exports.toLatin = toLatin;
    exports.toCyrillic = toCyrillic;
    exports.latinToCyrillic = latinToCyrillic;
    exports.cyrillicToLatin = cyrillicToLatin;
    var number_1 = require_number2();
    var words_1 = require_words();
    var converter = __importStar(require_converter());
    function toWord(number) {
      return new number_1.NumberToWord().toWord(number);
    }
    function toLatin(text) {
      return new words_1.Latin(text);
    }
    function toCyrillic(text) {
      return new words_1.Cyrillic(text);
    }
    function latinToCyrillic(text) {
      return converter.latin2cyrillic(text);
    }
    function cyrillicToLatin(text) {
      return converter.cyrillic2latin(text);
    }
  }
});
export default require_dist();
//# sourceMappingURL=kaalin.js.map
