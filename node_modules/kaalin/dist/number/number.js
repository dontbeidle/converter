"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberToWord = void 0;
class NumberToWord {
    constructor() {
        this.ones = [
            "", "bir", "eki", "úsh", "tórt", "bes", "altı", "jeti", "segiz", "toǵız",
            "on", "on bir", "on eki", "on úsh", "on tórt", "on bes", "on altı", "on jeti", "on segiz", "on toǵız"
        ];
        this.tens = ["", "", "jigirma", "otız", "qırıq", "eliw", "alpıs", "jetpis", "seksen", "toqsan"];
        this.scales = [
            { value: 1e+30, word: "nonillion" },
            { value: 1e+27, word: "oktillion" },
            { value: 1e+24, word: "septillion" },
            { value: 1e+21, word: "sekstilion" },
            { value: 1000000000000000000, word: "kvintillion" },
            { value: 1000000000000000, word: "kvadrillion" },
            { value: 1000000000000, word: "trillion" },
            { value: 1000000000, word: "milliard" },
            { value: 1000000, word: "million" },
            { value: 1000, word: "mıń" }
        ];
    }
    toWord(number) {
        if (number < 20)
            return this.ones[number];
        if (number < 100)
            return this.formatTens(number);
        if (number < 1000)
            return this.formatHundreds(number);
        if (number >= 1e+33) {
            throw new Error("Number is out of range");
        }
        for (const scale of this.scales) {
            if (number >= scale.value)
                return this.formatLargeNumber(number, scale.value, scale.word);
        }
        throw new Error("Number is out of range");
    }
    formatTens(number) {
        const mainDigit = Math.floor(number / 10);
        const remainder = number % 10;
        return remainder === 0 ? this.tens[mainDigit] : `${this.tens[mainDigit]} ${this.ones[remainder]}`;
    }
    formatHundreds(number) {
        const hundredDigit = Math.floor(number / 100);
        const remainder = number % 100;
        return remainder === 0
            ? (hundredDigit === 1 ? "júz" : `${this.ones[hundredDigit]} júz`)
            : `${this.ones[hundredDigit]} júz ${this.toWord(remainder)}`;
    }
    formatLargeNumber(number, divisor, word) {
        const mainDigit = Math.floor(number / divisor);
        const remainder = number % divisor;
        return remainder === 0
            ? `${this.toWord(mainDigit)} ${word}`
            : `${this.toWord(mainDigit)} ${word} ${this.toWord(remainder)}`;
    }
}
exports.NumberToWord = NumberToWord;
